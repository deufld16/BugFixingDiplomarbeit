/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package recorder.gui;

import recorder.gui.dlg.DynamicInputDlg;
import recorder.gui.dlg.WarenruecknahmeDlg;
import recorder.gui.dlg.MehrwertdienststornoDlg;
import recorder.gui.dlg.ELoadingBonstornoDlg;
import recorder.beans.Article;
import recorder.beans.Command;
import recorder.beans.DynamicFunction;
import recorder.beans.Operation;
import recorder.bl.DisplayListModel;
import recorder.enums.XMLOperations;
import recorder.guiOperations.GUIOperations;
import recorder.io.IOChecker;
import recorder.io.IOLoader;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import recorder.beans.DynamicValue;
import recorder.beans.Karte;
import recorder.gui.dlg.SyscommandDlg;

import recorder.beans.ListItem;
import recorder.gui.dlg.ChangePasswordDlg;
import static recorder.xml.RecorderXML.createCommand;

/**
 *
 * @author Maxi
 */
public class PaArticle extends javax.swing.JPanel {

    /**
     * Creates new form PaArticle
     */
    private DisplayListModel dlm;
    private JList<Article> liDisplay;
    private JFrame parentComponent;
    private int selAmount;
    private JTextField tfSumme;
    private boolean noSum = false;

    /**
     *
     * @param parentComponent
     * @param dlm
     * @param liDisplay
     * @param tfSumme
     */
    public PaArticle(JFrame parentComponent, DisplayListModel dlm, JList liDisplay, JTextField tfSumme) {
        initComponents();
        this.liDisplay = liDisplay;
        this.dlm = dlm;
        this.parentComponent = parentComponent;
        this.tfSumme = tfSumme;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btA1 = new javax.swing.JButton();
        btA2 = new javax.swing.JButton();
        btA3 = new javax.swing.JButton();
        btA4 = new javax.swing.JButton();
        btA5 = new javax.swing.JButton();
        btA6 = new javax.swing.JButton();
        btA7 = new javax.swing.JButton();
        btA8 = new javax.swing.JButton();
        btA9 = new javax.swing.JButton();
        btA10 = new javax.swing.JButton();
        btF1 = new javax.swing.JButton();
        btF2 = new javax.swing.JButton();
        btF3 = new javax.swing.JButton();
        btF4 = new javax.swing.JButton();
        btF5 = new javax.swing.JButton();
        btF6 = new javax.swing.JButton();
        btF7 = new javax.swing.JButton();
        btF8 = new javax.swing.JButton();
        btF9 = new javax.swing.JButton();
        btF10 = new javax.swing.JButton();
        btF11 = new javax.swing.JButton();
        btF12 = new javax.swing.JButton();
        btF13 = new javax.swing.JButton();
        btF14 = new javax.swing.JButton();
        btF15 = new javax.swing.JButton();
        btF16 = new javax.swing.JButton();
        btF17 = new javax.swing.JButton();
        btF18 = new javax.swing.JButton();
        btF19 = new javax.swing.JButton();
        btF20 = new javax.swing.JButton();
        btRemoveLine = new javax.swing.JButton();
        btAmount = new javax.swing.JButton();
        btBonstorno = new javax.swing.JButton();
        btWRUE1 = new javax.swing.JButton();
        btWRUE2 = new javax.swing.JButton();
        btSSDO = new javax.swing.JButton();
        btAmountRemove = new javax.swing.JButton();
        btWRUE = new javax.swing.JButton();
        btWRUE3 = new javax.swing.JButton();
        btSum = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(443, 450));
        setLayout(new java.awt.GridLayout(8, 5, 5, 5));

        btA1.setBackground(new java.awt.Color(255, 238, 4));
        btA1.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        btA1.setText("-");
        btA1.setPreferredSize(new java.awt.Dimension(89, 75));
        btA1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddArticleByButton(evt);
            }
        });
        add(btA1);

        btA2.setBackground(new java.awt.Color(255, 238, 4));
        btA2.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        btA2.setText("-");
        btA2.setPreferredSize(new java.awt.Dimension(89, 75));
        btA2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddArticleByButton(evt);
            }
        });
        add(btA2);

        btA3.setBackground(new java.awt.Color(255, 238, 4));
        btA3.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        btA3.setText("-");
        btA3.setPreferredSize(new java.awt.Dimension(89, 75));
        btA3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddArticleByButton(evt);
            }
        });
        add(btA3);

        btA4.setBackground(new java.awt.Color(255, 238, 4));
        btA4.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        btA4.setText("-");
        btA4.setPreferredSize(new java.awt.Dimension(89, 75));
        btA4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddArticleByButton(evt);
            }
        });
        add(btA4);

        btA5.setBackground(new java.awt.Color(255, 238, 4));
        btA5.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        btA5.setText("-");
        btA5.setPreferredSize(new java.awt.Dimension(89, 75));
        btA5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddArticleByButton(evt);
            }
        });
        add(btA5);

        btA6.setBackground(new java.awt.Color(255, 238, 4));
        btA6.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        btA6.setText("-");
        btA6.setPreferredSize(new java.awt.Dimension(89, 75));
        btA6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddArticleByButton(evt);
            }
        });
        add(btA6);

        btA7.setBackground(new java.awt.Color(255, 238, 4));
        btA7.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        btA7.setText("-");
        btA7.setPreferredSize(new java.awt.Dimension(89, 75));
        btA7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddArticleByButton(evt);
            }
        });
        add(btA7);

        btA8.setBackground(new java.awt.Color(255, 238, 4));
        btA8.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        btA8.setText("-");
        btA8.setPreferredSize(new java.awt.Dimension(89, 75));
        btA8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddArticleByButton(evt);
            }
        });
        add(btA8);

        btA9.setBackground(new java.awt.Color(255, 238, 4));
        btA9.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        btA9.setText("-");
        btA9.setPreferredSize(new java.awt.Dimension(89, 75));
        btA9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddArticleByButton(evt);
            }
        });
        add(btA9);

        btA10.setBackground(new java.awt.Color(255, 238, 4));
        btA10.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        btA10.setText("-");
        btA10.setPreferredSize(new java.awt.Dimension(89, 75));
        btA10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddArticleByButton(evt);
            }
        });
        add(btA10);

        btF1.setBackground(new java.awt.Color(0, 102, 0));
        btF1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF1.setForeground(new java.awt.Color(255, 255, 255));
        btF1.setText("-");
        btF1.setPreferredSize(new java.awt.Dimension(89, 75));
        btF1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDynamischeFunktion(evt);
            }
        });
        add(btF1);

        btF2.setBackground(new java.awt.Color(0, 102, 0));
        btF2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF2.setForeground(new java.awt.Color(255, 255, 255));
        btF2.setText("-");
        btF2.setName(""); // NOI18N
        btF2.setPreferredSize(new java.awt.Dimension(89, 75));
        btF2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDynamischeFunktion(evt);
            }
        });
        add(btF2);

        btF3.setBackground(new java.awt.Color(0, 102, 0));
        btF3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF3.setForeground(new java.awt.Color(255, 255, 255));
        btF3.setText("-");
        btF3.setPreferredSize(new java.awt.Dimension(89, 75));
        btF3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDynamischeFunktion(evt);
            }
        });
        add(btF3);

        btF4.setBackground(new java.awt.Color(0, 102, 0));
        btF4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF4.setForeground(new java.awt.Color(255, 255, 255));
        btF4.setText("-");
        btF4.setPreferredSize(new java.awt.Dimension(89, 75));
        btF4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDynamischeFunktion(evt);
            }
        });
        add(btF4);

        btF5.setBackground(new java.awt.Color(0, 102, 0));
        btF5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF5.setForeground(new java.awt.Color(255, 255, 255));
        btF5.setText("-");
        btF5.setPreferredSize(new java.awt.Dimension(89, 75));
        btF5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDynamischeFunktion(evt);
            }
        });
        add(btF5);

        btF6.setBackground(new java.awt.Color(0, 102, 0));
        btF6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF6.setForeground(new java.awt.Color(255, 255, 255));
        btF6.setText("-");
        btF6.setPreferredSize(new java.awt.Dimension(89, 75));
        btF6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDynamischeFunktion(evt);
            }
        });
        add(btF6);

        btF7.setBackground(new java.awt.Color(0, 102, 0));
        btF7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF7.setForeground(new java.awt.Color(255, 255, 255));
        btF7.setText("-");
        btF7.setPreferredSize(new java.awt.Dimension(89, 75));
        btF7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDynamischeFunktion(evt);
            }
        });
        add(btF7);

        btF8.setBackground(new java.awt.Color(0, 102, 0));
        btF8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF8.setForeground(new java.awt.Color(255, 255, 255));
        btF8.setText("-");
        btF8.setPreferredSize(new java.awt.Dimension(89, 75));
        btF8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDynamischeFunktion(evt);
            }
        });
        add(btF8);

        btF9.setBackground(new java.awt.Color(0, 102, 0));
        btF9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF9.setForeground(new java.awt.Color(255, 255, 255));
        btF9.setText("-");
        btF9.setPreferredSize(new java.awt.Dimension(89, 75));
        btF9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDynamischeFunktion(evt);
            }
        });
        add(btF9);

        btF10.setBackground(new java.awt.Color(0, 102, 0));
        btF10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF10.setForeground(new java.awt.Color(255, 255, 255));
        btF10.setText("-");
        btF10.setPreferredSize(new java.awt.Dimension(89, 75));
        btF10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDynamischeFunktion(evt);
            }
        });
        add(btF10);

        btF11.setBackground(new java.awt.Color(0, 102, 0));
        btF11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF11.setForeground(new java.awt.Color(255, 255, 255));
        btF11.setText("-");
        btF11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDynamischeFunktion(evt);
            }
        });
        add(btF11);

        btF12.setBackground(new java.awt.Color(0, 102, 0));
        btF12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF12.setForeground(new java.awt.Color(255, 255, 255));
        btF12.setText("-");
        btF12.setToolTipText("");
        btF12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onPreisabfrage(evt);
            }
        });
        add(btF12);

        btF13.setBackground(new java.awt.Color(0, 102, 0));
        btF13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF13.setForeground(new java.awt.Color(255, 255, 255));
        btF13.setText("-");
        btF13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDynamischeFunktion(evt);
            }
        });
        add(btF13);

        btF14.setBackground(new java.awt.Color(0, 102, 0));
        btF14.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF14.setForeground(new java.awt.Color(255, 255, 255));
        btF14.setText("-");
        btF14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDynamischeFunktion(evt);
            }
        });
        add(btF14);

        btF15.setBackground(new java.awt.Color(0, 102, 0));
        btF15.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF15.setForeground(new java.awt.Color(255, 255, 255));
        btF15.setText("-");
        btF15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDynamischeFunktion(evt);
            }
        });
        add(btF15);

        btF16.setBackground(new java.awt.Color(0, 102, 0));
        btF16.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF16.setForeground(new java.awt.Color(255, 255, 255));
        btF16.setText("-");
        btF16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDynamischeFunktion(evt);
            }
        });
        add(btF16);

        btF17.setBackground(new java.awt.Color(0, 102, 0));
        btF17.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF17.setForeground(new java.awt.Color(255, 255, 255));
        btF17.setText("-");
        btF17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDynamischeFunktion(evt);
            }
        });
        add(btF17);

        btF18.setBackground(new java.awt.Color(0, 102, 0));
        btF18.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF18.setForeground(new java.awt.Color(255, 255, 255));
        btF18.setText("-");
        btF18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDynamischeFunktion(evt);
            }
        });
        add(btF18);

        btF19.setBackground(new java.awt.Color(0, 102, 0));
        btF19.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF19.setForeground(new java.awt.Color(255, 255, 255));
        btF19.setText("-");
        add(btF19);

        btF20.setBackground(new java.awt.Color(0, 102, 0));
        btF20.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btF20.setForeground(new java.awt.Color(255, 255, 255));
        btF20.setText("-");
        add(btF20);

        btRemoveLine.setBackground(new java.awt.Color(0, 102, 0));
        btRemoveLine.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btRemoveLine.setForeground(new java.awt.Color(255, 255, 255));
        btRemoveLine.setText("<html> Zeilen-<br/>storno </html>");
        btRemoveLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRemoveLine(evt);
            }
        });
        add(btRemoveLine);

        btAmount.setBackground(new java.awt.Color(0, 102, 0));
        btAmount.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btAmount.setForeground(new java.awt.Color(255, 255, 255));
        btAmount.setText("Menge");
        btAmount.setToolTipText("");
        btAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSelectAmount(evt);
            }
        });
        add(btAmount);

        btBonstorno.setBackground(new java.awt.Color(0, 102, 0));
        btBonstorno.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btBonstorno.setForeground(new java.awt.Color(255, 255, 255));
        btBonstorno.setText("<html>Bon-<br/>storno</html>");
        btBonstorno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onBonstorno(evt);
            }
        });
        add(btBonstorno);

        btWRUE1.setBackground(new java.awt.Color(0, 102, 0));
        btWRUE1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btWRUE1.setForeground(new java.awt.Color(255, 255, 255));
        btWRUE1.setText("<html>Passwort<br/>ändern</html>");
        btWRUE1.setToolTipText("");
        btWRUE1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onChangePassword(evt);
            }
        });
        add(btWRUE1);

        btWRUE2.setBackground(new java.awt.Color(0, 102, 0));
        btWRUE2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btWRUE2.setForeground(new java.awt.Color(255, 255, 255));
        btWRUE2.setText("-");
        btWRUE2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onNotSupportedYet(evt);
            }
        });
        add(btWRUE2);

        btSSDO.setBackground(new java.awt.Color(0, 102, 0));
        btSSDO.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btSSDO.setForeground(new java.awt.Color(255, 255, 255));
        btSSDO.setText("<html> Sofort-<br/>storno </html>");
        btSSDO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRemoveLastLine(evt);
            }
        });
        add(btSSDO);

        btAmountRemove.setBackground(new java.awt.Color(0, 102, 0));
        btAmountRemove.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btAmountRemove.setForeground(new java.awt.Color(255, 255, 255));
        btAmountRemove.setText("<html>Menge<br/>entfernen</html>");
        btAmountRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRemoveAmount(evt);
            }
        });
        add(btAmountRemove);

        btWRUE.setBackground(new java.awt.Color(0, 102, 0));
        btWRUE.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btWRUE.setForeground(new java.awt.Color(255, 255, 255));
        btWRUE.setText("<html> Waren-<br/>rück-<br/>nahme </html>");
        btWRUE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onWarenruecknahme(evt);
            }
        });
        add(btWRUE);

        btWRUE3.setBackground(new java.awt.Color(0, 102, 0));
        btWRUE3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btWRUE3.setForeground(new java.awt.Color(255, 255, 255));
        btWRUE3.setText("<html>Syscom-<br/>mand</html>");
        btWRUE3.setToolTipText("");
        btWRUE3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSyscommand(evt);
            }
        });
        add(btWRUE3);

        btSum.setBackground(new java.awt.Color(0, 102, 0));
        btSum.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btSum.setForeground(new java.awt.Color(255, 255, 255));
        btSum.setText("Summe");
        btSum.setPreferredSize(new java.awt.Dimension(195, 150));
        btSum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSwitch(evt);
            }
        });
        add(btSum);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Method that handles a "Zeilenstorno"
     *
     * @param evt
     */
    private void onRemoveLine(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRemoveLine
        if (!liDisplay.getSelectedValuesList().isEmpty()) {
            GUIOperations.setBonStarted(true);
            Object obj = liDisplay.getSelectedValue();
            if (isRemoveable(obj)) {
                doZeilenStorno(obj, true);
            } else {
                if (JOptionPane.showConfirmDialog(GUIOperations.getMainframe(), "Es wurden bereits alle Artikel dieser Sorte stoniert, "
                        + "wollen Sie eine solcehn Artikel trotzdem nocheinmal stornieren?") == 0) {
                    doZeilenStorno(obj, false);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Es kann kein Zeilenstorno durchgeführt werden!\nBitte wählen Sie den Artikel in der Liste aus, den Sie stornieren wollen!");
        }
    }//GEN-LAST:event_onRemoveLine

    /**
     * Method that takes all necessary actions for a "Zeilenstorno"
     *
     * @param obj
     * @param help
     */
    private void doZeilenStorno(Object obj, boolean help) {
        Article tmp_art = null;
        Object xmlLine = null;

        if (obj instanceof Article) {
            tmp_art = (Article) obj;
            double summe = Double.parseDouble(tfSumme.getText().replace(",", "."));
            if (help) {
                dlm.remArtikel((Article) obj);
            }
            tfSumme.setText(String.format("%.2f", summe));
            if (((Article) obj).getCategory().equalsIgnoreCase("Mehrwertdienstartikel")) {
                if (JOptionPane.showConfirmDialog(GUIOperations.getMainframe(),
                        "Mehrwertdienstartikel ausgewählt, soll eine Mehrwertdienstartikelstorno durchgeführt werden?") == 0) {
                    MehrwertdienststornoDlg mwdDlg = new MehrwertdienststornoDlg(GUIOperations.getMainframe(), true);
                    mwdDlg.setVisible(true);

                    if (mwdDlg.isOk()) {
                        Command command = null;
                        if (mwdDlg.isPfeiltaste()) {
                            command = GUIOperations.getRecorderXml().createCommand("storno", "article",
                                    ((Article) obj).getXmlArticleName(), "function", "MSTO", "input", mwdDlg.getDisplayText());
                        } else {
                            command = GUIOperations.getRecorderXml().createCommand("storno", "article",
                                    ((Article) obj).getXmlArticleName(), "function", "MSTO", "input", "touch", "idx", mwdDlg.getDisplayText());
                        }
                        command.setDisplayText("Mehrwertdienstartikelstorno (MSTO) - " + ((Article) obj).getArticleName());
                        xmlLine = command;
                        dlm.addObject(xmlLine);
                    }
                } else {
                    xmlLine = new Operation(XMLOperations.ZEILENSTORNO, (Article) obj);
                    dlm.addObject(xmlLine);
                }

            } else {
                xmlLine = new Operation(XMLOperations.ZEILENSTORNO, (Article) obj);
                dlm.addObject(xmlLine);
            }

            if (((Article) obj).isSerialNrRequired() && ((Article) obj).isEloading()) {
                if (JOptionPane.showConfirmDialog(GUIOperations.getMainframe(), "Es wurde ein Eloading Artikel mit Seriennummer stoniert, soll die Stonierung erfolgreich durchgeführt werden?") == 0) {
                    Command command = GUIOperations.getRecorderXml().createCommand("card", "id", ((Article) obj).getSerialNr(), "input", "scan");
                    command.setDisplayText("Seriennummer der Karte Scannen - " + ((Article) obj).getSerialNr());
                    dlm.addObject(command);
                } else {
                    if (tmp_art != null) {
                        tmp_art.setStorno_error(true);
                        if (xmlLine instanceof Command) {
                            Command command = (Command) xmlLine;
                            command.setError(true);
                        } else if (xmlLine instanceof Operation) {
                            Operation operation = (Operation) xmlLine;
                            operation.setIsError(true);
                        }
                    }
                }
            }
            if (Math.round(((Article) obj).getAmount() * ((Article) obj).getPreis() * 100) > recorder.io.IOLoader.getMSTOLim()) {
                if (xmlLine instanceof Operation) {
                    ((Operation) xmlLine).setNeedsAutorisation(true);
                }
            }
            liDisplay.updateUI();
            GUIOperations.setPrice();
        } else if (obj instanceof Karte) {
            Karte card = (Karte) obj;
            card.setIsStorno(true);
            Command tmp_com = GUIOperations.getRecorderXml().createCommand("storno", "function", "MSTO", "cardid",
                    card.getId(), "input", "scan");
            tmp_com.setDisplayText("Zeilenstorno (Karte)" + card.getId());
            dlm.addObject(tmp_com);
            if (help) {
                dlm.remCard(card);
            }
            GUIOperations.setPrice();
            liDisplay.updateUI();
        }

    }

    /**
     * Method that handles a "Sofortstorno"
     *
     * @param evt
     */
    private void onRemoveLastLine(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRemoveLastLine
        Object xmlLine = null;
        Article tmp_art = null;
        try {
            double summe = Double.parseDouble(tfSumme.getText().replace(",", "."));
            if (!dlm.getDisplayedArtikel().isEmpty()) {
                GUIOperations.setBonStarted(true);
                boolean containsArt = false;
                for (int i = dlm.getDisplayedArtikel().size() - 1; i >= 0; i--) {
                    if (isRemoveable(dlm.getDisplayedArtikel().get(i))) {
                        if (dlm.getDisplayedArtikel().get(i) instanceof Article) {
                            containsArt = true;
                            tmp_art = ((Article) dlm.getDisplayedArtikel().get(i));
                            if (((Article) dlm.getDisplayedArtikel().get(i)).getCategory().equalsIgnoreCase("Mehrwertdienstartikel")) {
                                if (JOptionPane.showConfirmDialog(GUIOperations.getMainframe(),
                                        "Mehrwertdienstartikel ausgewählt, soll eine Mehrwertdienstartikelstorno durchgeführt werden?") == 0) {
                                    MehrwertdienststornoDlg mwdDlg = new MehrwertdienststornoDlg(GUIOperations.getMainframe(), true);
                                    mwdDlg.setVisible(true);

                                    if (mwdDlg.isOk()) {
                                        Command command = null;
                                        if (mwdDlg.isPfeiltaste()) {
                                            command = GUIOperations.getRecorderXml().createCommand("storno", "article",
                                                    ((Article) dlm.getDisplayedArtikel().get(i)).getXmlArticleName(), "function", "SSTO", "input", mwdDlg.getDisplayText());
                                        } else {
                                            command = GUIOperations.getRecorderXml().createCommand("storno", "article",
                                                    ((Article) dlm.getDisplayedArtikel().get(i)).getXmlArticleName(), "function", "SSTO", "input", "touch", "idx", mwdDlg.getDisplayText());
                                        }
                                        command.setDisplayText("Mehrwertdienstartikelstorno (SSTO) - " + ((Article) dlm.getDisplayedArtikel().get(i)).getArticleName());
                                        xmlLine = command;
                                    }
                                } else {
                                    xmlLine = new Operation(XMLOperations.SOFORTSTORNO, (Article) dlm.getDisplayedArtikel().get(i));
                                }

                            } else {
                                xmlLine = new Operation(XMLOperations.SOFORTSTORNO, (Article) dlm.getDisplayedArtikel().get(i));
                            }
                            if (Math.round(((Article) dlm.getDisplayedArtikel().get(i)).getAmount() * ((Article) dlm.getDisplayedArtikel().get(i)).getPreis() * 100)
                                    > recorder.io.IOLoader.getSSTOLim()) {
                                if (xmlLine instanceof Operation) {
                                    ((Operation) xmlLine).setNeedsAutorisation(true);
                                }
                            }
                            dlm.remArtikel((Article) dlm.getDisplayedArtikel().get(i));
                            tfSumme.setText(String.format("%.2f", summe));
                            GUIOperations.setPrice();
                            break;
                        } else if (dlm.getDisplayedArtikel().get(i) instanceof Karte) {
                            containsArt = true;
                            Karte card = (Karte) dlm.getDisplayedArtikel().get(i);
                            card.setIsStorno(true);
                            Command tmp_com = GUIOperations.getRecorderXml().createCommand("storno", "function", "MSTO", "cardid",
                                    card.getId(), "input", "scan");
                            tmp_com.setDisplayText("Zeilenstorno (Karte)" + card.getId());
                            xmlLine = tmp_com;
                            dlm.remCard(card);
                            break;
                        }
                    }
                }
                if (!containsArt) {
                    JOptionPane.showMessageDialog(null, "Es gibt keinen Artikel, der entfernt werden könnte!");
                    return;
                }

                if (xmlLine != null) {
                    liDisplay.setSelectedIndex(-1);
                    dlm.addObject(xmlLine);
                }
                if (tmp_art != null) {
                    if (tmp_art.isSerialNrRequired() && tmp_art.isEloading()) {
                        if (JOptionPane.showConfirmDialog(GUIOperations.getMainframe(), "Es wurde ein Eloading Artikel mit Seriennummer stoniert, soll die Stonierung erfolgreich durchgeführt werden?") == 0) {
                            Command command = GUIOperations.getRecorderXml().createCommand("card", "id", tmp_art.getSerialNr(), "input", "scan");
                            command.setDisplayText("Seriennummer der Karte Scannen - " + tmp_art.getSerialNr());
                            dlm.addObject(command);
                        } else {
                            if (xmlLine instanceof Command) {
                                Command command = (Command) xmlLine;
                                command.setError(true);
                            } else if (xmlLine instanceof Operation) {
                                Operation operation = (Operation) xmlLine;
                                operation.setIsError(true);
                            }
                            tmp_art.setStorno_error(true);
                        }
                    }
                }
                liDisplay.updateUI();
                GUIOperations.setPrice();
            } else {
                JOptionPane.showMessageDialog(null, "Es gibt keinen Artikel, der entfernt werden könnte!");
            }
        } catch (IndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Es gibt keinen Artikel, der entfernt werden könnte!");
        }
    }//GEN-LAST:event_onRemoveLastLine
    /**
     * Method to switch between paFinance and paArticle
     *
     * @param evt
     */
    private void onSwitch(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSwitch
        if (!noSum) {
            GUIOperations.getDlm().addObject(new Operation(XMLOperations.ZUBEZAHLEN, String.format("%.2f", Double.parseDouble(GUIOperations.getTfSumme().getText().replace(",", ".")))));
        }
        GUIOperations.onSwitch();
        GUIOperations.getBtnSwitch().setEnabled(true);
        GUIOperations.setPaid(false);
    }//GEN-LAST:event_onSwitch

    /**
     * OnClick-Event that sets the "Menge" for the selection of articles
     *
     * @param evt
     */
    private void onSelectAmount(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSelectAmount
        try {
            GUIOperations.setBonStarted(true);
            int amount = Integer.parseInt(GUIOperations.getTfDigitField().getText());
            if (amount != 0) {
                dlm.setAmount(amount);
            } else {
                JOptionPane.showMessageDialog(null, "Menge 0 macht keinen Sinn");
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Bitte zuerst Menge über Bildschirmtastatur eingeben!");
        }
    }//GEN-LAST:event_onSelectAmount

    /**
     * OnClick-Event that removes the "Menge" for the selected articles
     *
     * @param evt
     */
    private void onRemoveAmount(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRemoveAmount
        if (dlm.getAmount() == 1) {
            JOptionPane.showMessageDialog(null, "Es kann keine Menge entfernt werden!");
        } else {
            dlm.setAmount(1);
            GUIOperations.getTfDigitField().setText("");
        }
    }//GEN-LAST:event_onRemoveAmount
    /**
     * Method that is called when an article from the yellow buttons is inserted
     *
     * @param evt
     */
    private void onAddArticleByButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddArticleByButton
        List<Article> allArt = GUIOperations.getAtm().getAllArtikels();
        String eanFromButton = evt.getActionCommand();
        for (Article article : allArt) {
            if (article.getEan().equalsIgnoreCase(eanFromButton)) {
                Article tmp = article;
                Article art = new Article(tmp.getXmlArticleName(), tmp.isLeergut(), tmp.isJugendSchutz(), tmp.getEan(), tmp.getArticleName(), tmp.isPfand(), tmp.getPfandArtikel(), tmp.getPreis(), tmp.isRabatt(), tmp.getUst(), tmp.isWeight(), tmp.getCategory(), tmp.isEloading());
                art.setAmount(dlm.getAmount());
                GUIOperations.addArticle(art);
            }
        }
        GUIOperations.getTfDigitField().setText("");
        GUIOperations.setPrice();
    }//GEN-LAST:event_onAddArticleByButton

    /**
     * Method that is called when a function from the dynamic green buttons is
     * added
     *
     * @param evt
     */
    private void onDynamischeFunktion(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onDynamischeFunktion
        GUIOperations.setBonStarted(true);
        JButton btSrc = (JButton) evt.getSource();
        Map<String, DynamicFunction> functions = IOLoader.functions;
        for (String str : btSrc.getActionCommand().split(",")) {
            DynamicFunction df = functions.get(str);
            if (df == null) {
                return;
            }
            HashMap<String, Object> newAttributes = new HashMap<>();
            for (String key : df.getCommand().getAttributes().keySet()) {
                newAttributes.put(key, df.getCommand().getAttributes().get(key));
            }

            String displayText = df.getViewText();

            if (df.getCommand().getCommandName().equalsIgnoreCase("card")) {
                DynamicInputDlg didlg = new DynamicInputDlg(null, true, "STRING", "id", "id");
                didlg.setVisible(true);
                Karte card = null;
                if (didlg.isDone()) {
                    String id = didlg.getModifiedInput().toString();
                    didlg.setModifiedInput(null);

                    card = new Karte(id, 0, false, "");
                }

                didlg = new DynamicInputDlg(null, true, "STRING", "type", "type");
                didlg.setVisible(true);
                if (didlg.isDone()) {
                    String type = didlg.getModifiedInput().toString();
                    didlg.setModifiedInput(null);

                    card.setType(type);
                }
                if (JOptionPane.showConfirmDialog(GUIOperations.getMainframe(), "Soll diese Karte aufgeladen werden?") == 0) {
                    didlg = new DynamicInputDlg(null, true, "INT", "aufladung", "Aufladung");
                    didlg.setVisible(true);
                    if (didlg.isDone()) {
                        int aufladung = Integer.parseInt(didlg.getModifiedInput().toString());
                        didlg.setModifiedInput(null);
                        card.setAufladung(aufladung);
                    }
                }
                dlm.addObject(card);
                GUIOperations.setPrice();
            } else {
                Command command = new Command(df.getCommand().getCommandName(), newAttributes, displayText);
                HashMap<String, Object> cmdAttributes = command.getAttributes();
                for (String cmdKey : cmdAttributes.keySet()) {
                    if (((DynamicValue) cmdAttributes.get(cmdKey)).getValue() instanceof String) {
                        String inputType = ((DynamicValue) cmdAttributes.get(cmdKey)).getValue() + "";
                        switch (inputType) {
                            case "STRING":
                            case "STRINGUPPER":
                            case "STRINGLOWER":
                            case "INT":
                            case "DOUBLE":
                                DynamicInputDlg didlg = new DynamicInputDlg(null, true, inputType, cmdKey, ((DynamicValue) cmdAttributes.get(cmdKey)).getDisplayText());
                                didlg.setVisible(true);
                                if (didlg.isDone()) {
                                    cmdAttributes.replace(cmdKey, didlg.getModifiedInput());
                                    didlg.setModifiedInput(null);
                                    displayText += " - " + cmdKey + "=" + cmdAttributes.get(cmdKey);
                                    command.setDisplayText(displayText);
                                } else {
                                    return;
                                }
                                break;
                            default:
                                cmdAttributes.replace(cmdKey, ((DynamicValue) cmdAttributes.get(cmdKey)).getValue());
                        }
                    } else {
                        DynamicInputDlg dydlg = new DynamicInputDlg(null, true, cmdKey, (List<ListItem>) ((DynamicValue) cmdAttributes.get(cmdKey)).getValue(), ((DynamicValue) cmdAttributes.get(cmdKey)).getDisplayText());
                        dydlg.setVisible(true);
                        if (dydlg.isDone()) {
                            cmdAttributes.replace(cmdKey, dydlg.getSelectedItem().getValue());
                            ListItem selection = dydlg.getSelectedItem();
                            for (String key : selection.getAttributes().keySet()) {
                                if (((DynamicValue) selection.getAttributes().get(key)).getValue() instanceof String) {
                                    String inputType = ((DynamicValue) selection.getAttributes().get(key)).getValue() + "";
                                    switch (inputType) {
                                        case "STRING":
                                        case "STRINGUPPER":
                                        case "STRINGLOWER":
                                        case "INT":
                                        case "DOUBLE":
                                            DynamicInputDlg didlg = new DynamicInputDlg(null, true, inputType, key, ((DynamicValue) selection.getAttributes().get(key)).getDisplayText());
                                            didlg.setVisible(true);
                                            if (didlg.isDone()) {
                                                cmdAttributes.put(key, didlg.getModifiedInput());
                                                didlg.setModifiedInput(null);
                                            } else {
                                                return;
                                            }
                                            break;
                                    }
                                }
                            }
                            dydlg.setModifiedInput(null);
                            displayText += " - " + cmdKey + "=" + cmdAttributes.get(cmdKey);
                            command.setDisplayText(displayText);
                        } else {
                            return;
                        }
                    }
                }
                dlm.addObject(command);
            }
        }
    }//GEN-LAST:event_onDynamischeFunktion
    /**
     * Method that is called when the user inserts a "Bonstorno"
     *
     * @param evt
     */
    private void onBonstorno(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onBonstorno
        JFileChooser recorderChooser = new JFileChooser();
        if (recorderChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                if (IOChecker.checkValidBon(recorderChooser.getSelectedFile().toPath())) {
                    GUIOperations.setBonStarted(true);
                    String parameter = IOChecker.getMarkerName(recorderChooser.getSelectedFile().toPath()).getNodeValue();
                    Command command = null;
                    HashMap<String, Object> help;
                    if (IOChecker.containsEloadingArticle(recorderChooser.getSelectedFile().toPath())) {
                        ELoadingBonstornoDlg dlg = new ELoadingBonstornoDlg(parentComponent, true);
                        dlg.setVisible(true);
                        String status = dlg.getStatus();
                        if (status != null) {
                            switch (status) {
                                case "Mit eLoading-Artikel: Storno OK":
                                    GUIOperations.getRecorderXml().setEloading(true);
                                    GUIOperations.getRecorderXml().setBonStornoType(1);
                                    help = new HashMap<>();
                                    help.put("function", "BONSTORNO");
                                    help.put("parameter", parameter);
                                    command = new Command("controlkey", help, "BONSTORNO");
                                    GUIOperations.getDlm().addObject(command);
                                    break;
                                case "Mit eLoading-Artikel: Storno NOK":
                                    GUIOperations.getRecorderXml().setEloading(true);
                                    GUIOperations.getRecorderXml().setBonStornoType(2);
                                    help = new HashMap<>();
                                    help.put("function", "BONSTORNO");
                                    help.put("parameter", parameter);
                                    help.put("noeloadingstorno", "true");
                                    command = new Command("controlkey", help, "BONSTORNO");
                                    GUIOperations.getDlm().addObject(command);
                                    break;
                            }
                        } else {
                            GUIOperations.getRecorderXml().setEloading(true);
                            GUIOperations.getRecorderXml().setBonStornoType(2);
                            help = new HashMap<>();
                            help.put("function", "BONSTORNO");
                            help.put("parameter", parameter);
                            help.put("noeloadingstorno", "true");
                            command = new Command("controlkey", help, "BONSTORNO");
                            GUIOperations.getDlm().addObject(command);
                        }
                    } else {
                        GUIOperations.getRecorderXml().setBonStornoType(0);
                        help = new HashMap<>();
                        help.put("function", "BONSTORNO");
                        help.put("parameter", parameter);
                        command = new Command("controlkey", help, "BONSTORNO");
                        GUIOperations.getDlm().addObject(command);
                    }

                    GUIOperations.getDlm().addObject(createCommand("sync", "value", "200"));
                    GUIOperations.getDlm().addObject(createCommand("keyboard", "value", "4040"));
                    GUIOperations.getDlm().addObject(createCommand("keyboard", "value", "1234"));
                    if (JOptionPane.showConfirmDialog(GUIOperations.getMainframe(), "Rekordererstellvorgang abschließen? Bei Nein wird in das \"Finanzmenü\" gewechselt\n"
                            + "um etwaige Funktionen wie Übersteuern noch durchführen zu könnens") != 0) {
                        GUIOperations.setPayProcessStarted(true);
                        noSum = true;
                        onSwitch(null);
                        noSum = false;
                    } else {
                        GUIOperations.getRecorderXml().setIsPayment(false);
                        GUIOperations.getRecorderXml().createSquashText(GUIOperations.getDlm(), 0);
                        GUIOperations.getRecorderXml().getArticlesForXml(GUIOperations.getDlm());
                    }
                } else {
                    JOptionPane.showMessageDialog(GUIOperations.getMainframe(), "Bei der ausgewählten Datei handelt es sich um keinen Bon bzw. um einen Bon, welcher eine Bonstorno repräsentiert");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(GUIOperations.getMainframe(), "Bei der ausgewählten Datei handelt es sich um keinen Bon bzw. um einen Bon, welcher eine Bonstorno repräsentiert");
        }
    }//GEN-LAST:event_onBonstorno

    /**
     * Method that is called when the user inserts a "Warenrücknahme"
     *
     * @param evt
     */
    private void onWarenruecknahme(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onWarenruecknahme
        GUIOperations.setBonStarted(true);
        WarenruecknahmeDlg dlg = new WarenruecknahmeDlg(parentComponent, true);
        dlg.setVisible(true);
        String status = dlg.getStatus();
        if (status != null) {
            switch (status) {
                case "Ohne eLoading-Artikel":
                    GUIOperations.getRecorderXml().setBonStornoType(0);
                    GUIOperations.getDlm().addObject(new Operation(XMLOperations.WARENRUECKNAHME));
                    break;
                case "Mit eLoading-Artikel: Storno OK":
                    GUIOperations.getRecorderXml().setEloading(true);
                    GUIOperations.getRecorderXml().setBonStornoType(1);
                    GUIOperations.getDlm().addObject(new Operation(XMLOperations.WARENRUECKNAHME));
                    break;
                case "Mit eLoading-Artikel: Storno NOK":
                    GUIOperations.getRecorderXml().setEloading(true);
                    GUIOperations.getRecorderXml().setBonStornoType(2);
                    GUIOperations.getDlm().addObject(new Operation(XMLOperations.WARENRUECKNAHME));
                    break;
            }
        }
    }//GEN-LAST:event_onWarenruecknahme

    /**
     * Method that is called for all buttons which are not supported yet
     *
     * @param evt
     */
    private void onNotSupportedYet(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onNotSupportedYet
        JOptionPane.showMessageDialog(this, "Dies sind noch zur Verfügung stehende statische Funktionsbuttons, welche keien Funktionalität aufweisen");
    }//GEN-LAST:event_onNotSupportedYet

    /**
     * Method to let the user change their password
     *
     * @param evt
     */
    private void onChangePassword(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onChangePassword
        GUIOperations.setBonStarted(true);
        ChangePasswordDlg cpdlg = new ChangePasswordDlg(GUIOperations.getMainframe(), true);
        cpdlg.setVisible(true);

        if (cpdlg.isOk()) {
            int selection = cpdlg.getSelection();
            int password = -1;
            do {
                try {
                    password = Integer.parseInt(JOptionPane.showInputDialog(GUIOperations.getMainframe(), "Geben Sie das neue Passwort ein"));
                } catch (NumberFormatException ex) {
                    int type = JOptionPane.showConfirmDialog(GUIOperations.getMainframe(), "Es wurde keine valide Zahl eingegeben, wollen Sie das Erstellen"
                            + "des Kommandos abbrechen?");
                    if (type != 0) {
                        return;
                    }
                }

            } while (password == -1);
            HashMap<String, Object> command_map = new HashMap<>();
            Command command = null;

            switch (selection) {
                case 0:
                    command_map.put("changepwd", "true");
                    break;
                case 1:
                    command_map.put("changepwd", "false");
                    break;
                case 2:
                    command_map.put("changepwd", "error");
                    break;
            }

            command_map.put("pwd", password);

            command = new Command("login", command_map, "Passwort-Änderung");
            GUIOperations.setPwChange(true);
            GUIOperations.getDlm().addObject(command);
            if (JOptionPane.showConfirmDialog(GUIOperations.getMainframe(), "Wollen Sie den Bon erstellungsvorgang beenden?") == 0) {
                if (GUIOperations.getMoney() == 0 && GUIOperations.getTfSumme().getText().equalsIgnoreCase("0,00")) {
                    GUIOperations.getRecorderXml().setIsPayment(false);
                }
                GUIOperations.getRecorderXml().createSquashText(GUIOperations.getDlm(), 0);
                GUIOperations.getRecorderXml().getArticlesForXml(GUIOperations.getDlm());
            }
        }
    }//GEN-LAST:event_onChangePassword

    /**
     * Method to insert a "Preisabfrage"
     *
     * @param evt
     */
    private void onPreisabfrage(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onPreisabfrage
        GUIOperations.setBonStarted(true);
        int[] selectedRows = GUIOperations.getTaArtikel().getSelectedRows();
        if (selectedRows.length != 0) {
            List<Article> allSelectedArticle = new LinkedList<>();
            GUIOperations.getRecorderXml().setIsPayment(true);
            for (int selectedRow : selectedRows) {
                allSelectedArticle.add(GUIOperations.getAtm().getFilteredArtikels().get(selectedRow));
            }
            for (Article article : allSelectedArticle) {
                Command command = GUIOperations.getRecorderXml().createCommand("controlkey", "function", "ABFR");
                command.setDisplayText("ABFR");
                GUIOperations.getDlm().addObject(command);
                Article art = new Article(article.getXmlArticleName(), article.isLeergut(),
                        article.isJugendSchutz(), article.getEan(), article.getArticleName(),
                        article.isPfand(), article.getPfandArtikel(), article.getPreis(), article.isRabatt(), article.getUst(),
                        article.isWeight(), article.getCategory(), article.isEloading(), article.isSerialNrRequired());
                art.setIsAbfrage(true);
                GUIOperations.addArticle(art);
            }
        } else {
            Command command = GUIOperations.getRecorderXml().createCommand("controlkey", "function", "ABFR");
            command.setDisplayText("ABFR");
            GUIOperations.getDlm().addObject(command);
        }
    }//GEN-LAST:event_onPreisabfrage

    /**
     * Method that handles the insertion of syscommands
     *
     * @param evt
     */
    private void onSyscommand(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSyscommand
        GUIOperations.setBonStarted(true);
        int beginning_and_end = -1;
        int choice = JOptionPane.showConfirmDialog(GUIOperations.getMainframe(), "Wollen Sie das Systemcommando am Anfang und am Ende des Bons einfügen?");
        if (choice == 0) {
            beginning_and_end = 0;
        } else if (choice == 1) {
            SyscommandDlg sysDlg = new SyscommandDlg(GUIOperations.getMainframe(), true);
            sysDlg.setVisible(true);

            if (sysDlg.isOk()) {
                beginning_and_end = 1;
                choice = sysDlg.getVariant() + 1;
            } else {
                beginning_and_end = -1;
            }
        }
        String syscommand_start = null;
        String syscommand_end = null;
        String syscommand = null;
        if (beginning_and_end != -1) {
            if (choice == 0) {
                syscommand_start = JOptionPane.showInputDialog(GUIOperations.getMainframe(), "Geben Sie den gewünschten Start-Systemcommand ein");
                syscommand_end = JOptionPane.showInputDialog(GUIOperations.getMainframe(), "Geben Sie den gewünschten End-Systemcommand ein");
            } else {
                syscommand = JOptionPane.showInputDialog(GUIOperations.getMainframe(), "Geben Sie den gewünschten Systemcommand ein");
            }
        } else {
            return;
        }

        if (syscommand_start != null && syscommand_end != null || syscommand != null) {
            if (choice == 0) {
                GUIOperations.getRecorderXml().getSysCommandsStart().add(syscommand_start);
                GUIOperations.getRecorderXml().getSysCommandsEnd().add(syscommand_end);
                JOptionPane.showMessageDialog(GUIOperations.getMainframe(), "Systemcommando werden bei Bonabschluss eingefügt");
            } else {
                switch (choice) {
                    case 1:
                        GUIOperations.getRecorderXml().getSysCommandsStart().add(syscommand);
                        JOptionPane.showMessageDialog(GUIOperations.getMainframe(), "Systemcommando werden bei Bonabschluss eingefügt");
                        break;
                    case 2:
                        Command command = GUIOperations.getRecorderXml().createCommand("syscommand", "command", syscommand);
                        command.setDisplayText("Systemcommando eingefügt");
                        dlm.addObject(command);
                        break;
                    case 3:
                        GUIOperations.getRecorderXml().getSysCommandsEnd().add(syscommand);
                        JOptionPane.showMessageDialog(GUIOperations.getMainframe(), "Systemcommando werden bei Bonabschluss eingefügt");
                        break;
                }
            }
        }
    }//GEN-LAST:event_onSyscommand

    public JButton getBtBonstorno() {
        return btBonstorno;
    }

    public void setBtBonstorno(JButton btBonstorno) {
        this.btBonstorno = btBonstorno;
    }

    public JButton getBtWRUE() {
        return btWRUE;
    }

    public void setBtWRUE(JButton btWRUE) {
        this.btWRUE = btWRUE;
    }

    /**
     * Method that checks if the article can be removed (for "Sofort-" and
     * "Zeilenstorno"
     *
     * @param obj
     * @return boolean (true Obj. ist entfernbar / false Obj. ist nicht
     * entfernbar)
     */
    private boolean isRemoveable(Object obj) {
        if (obj instanceof Article || (obj instanceof Karte)) {
            int amount_in_display = 0;
            int amount_in_removed = 0;

            for (Object allDisplayedArticle : dlm.getDisplayedArtikel()) {
                if (allDisplayedArticle.equals(obj)) {
                    amount_in_display++;
                }
            }
            for (Object removedObject : dlm.getRemovedObjects()) {
                if (removedObject.equals(obj)) {
                    amount_in_removed++;
                }
            }

            return amount_in_display != amount_in_removed;
        }
        return false;
    }

    /**
     * Method that sets all articles on the yellow buttons
     *
     * @param articleForButton
     */
    public void setButtons(Map<String, String> articleForButton) {
        int i = 0;
        for (String string : articleForButton.keySet()) {
            String ean = articleForButton.get(string);
            for (Article art : GUIOperations.getAtm().getAllArtikels()) {
                if (art.getEan().equalsIgnoreCase(ean)) {
                    String display = "<html><body>";
                    if (art.getArticleName().length() > 7) {
                        display += art.getArticleName().substring(0, 7) + "-";
                        display += "<br/>";
                        display += art.getArticleName().substring(7);
                        display += "</body></html>";
                    } else {
                        display = display + art.getArticleName() + "</body></html>";
                    }
                    getArticleButtons().get(Integer.parseInt(string.split("_")[1]) - 1).setText(display);
                    getArticleButtons().get(Integer.parseInt(string.split("_")[1]) - 1).setActionCommand(art.getEan());
                }
            }

        }
    }

    /**
     * Method that sets all dynamic functions on the green buttons
     *
     * @param functionTagForBtn Key --> Button-Name, Value --> selbst
     * definierter jeweiliger XML Tag
     */
    public void addDynamicFunctionalities(Map<String, String> functionTagForBtn) {
        Map<String, DynamicFunction> functions = IOLoader.functions;
        String nameHelperStr = "btF";
        int nameHelperInt = 1;
        for (JButton btDynFunc : getDynFuncButtons()) {
            try {
                String currentKey = nameHelperStr + nameHelperInt++;
                String definedXmlTagStr = functionTagForBtn.get(currentKey);
                if (definedXmlTagStr.contains(";") && definedXmlTagStr.indexOf(";") + 1 != definedXmlTagStr.length()) {
                    btDynFunc.setActionCommand(definedXmlTagStr.substring(0, definedXmlTagStr.indexOf(";")));
                    String display = "<html><body>";
                    if (definedXmlTagStr.substring(definedXmlTagStr.indexOf(";") + 1).length() > 7) {
                        display += definedXmlTagStr.substring(definedXmlTagStr.indexOf(";") + 1).substring(0, 7) + "-";
                        display += "<br/>";
                        display += definedXmlTagStr.substring(definedXmlTagStr.indexOf(";") + 1).substring(7);
                        display += "</body></html>";
                    } else {
                        display = display + definedXmlTagStr.substring(definedXmlTagStr.indexOf(";") + 1) + "</body></html>";
                    }
                    btDynFunc.setText(display);
                } else {
                    String helpXmlTagStr = definedXmlTagStr.replaceAll(";", "");

                    btDynFunc.setActionCommand(helpXmlTagStr);

                    String display = "<html><body>";
                    if (definedXmlTagStr.contains(",")) {
                        if (functions.get(helpXmlTagStr.substring(0, helpXmlTagStr.indexOf(","))).getBtnName().length() > 7) {
                            display += functions.get(helpXmlTagStr.substring(0, helpXmlTagStr.indexOf(","))).getBtnName().substring(0, 7) + "-";
                            display += "<br/>";
                            display += functions.get(helpXmlTagStr.substring(0, helpXmlTagStr.indexOf(","))).getBtnName().substring(7);
                            display += "</body></html>";
                        } else {
                            display = display + functions.get(helpXmlTagStr.substring(0, helpXmlTagStr.indexOf(","))).getBtnName() + "</body></html>";
                        }
                    } else {
                        if (functions.get(helpXmlTagStr).getBtnName().length() > 7) {
                            display += functions.get(helpXmlTagStr).getBtnName().substring(0, 7) + "-";
                            display += "<br/>";
                            display += functions.get(helpXmlTagStr).getBtnName().substring(7);
                            display += "</body></html>";
                        } else {
                            display = display + functions.get(helpXmlTagStr).getBtnName() + "</body></html>";
                        }

                    }
                    btDynFunc.setText(display);
                }
            } catch (Exception ex) {

            }
        }
    }

    /**
     * Method that creates the map for all yellow buttons
     *
     * @return
     */
    public List<JButton> getArticleButtons() {
        List<JButton> allArticleButtons = new LinkedList<>();
        allArticleButtons.add(btA1);
        allArticleButtons.add(btA2);
        allArticleButtons.add(btA3);
        allArticleButtons.add(btA4);
        allArticleButtons.add(btA5);
        allArticleButtons.add(btA6);
        allArticleButtons.add(btA7);
        allArticleButtons.add(btA8);
        allArticleButtons.add(btA9);
        allArticleButtons.add(btA10);
        return allArticleButtons;
    }

    /**
     * Method that creates a map for all dynamic function buttons
     *
     * @return
     */
    public List<JButton> getDynFuncButtons() {
        List<JButton> allFunctionButtons = new LinkedList<>();
        allFunctionButtons.add(btF1);
        allFunctionButtons.add(btF2);
        allFunctionButtons.add(btF3);
        allFunctionButtons.add(btF4);
        allFunctionButtons.add(btF5);
        allFunctionButtons.add(btF6);
        allFunctionButtons.add(btF7);
        allFunctionButtons.add(btF8);
        allFunctionButtons.add(btF9);
        allFunctionButtons.add(btF10);
        allFunctionButtons.add(btF11);
        allFunctionButtons.add(btF12);
        allFunctionButtons.add(btF13);
        allFunctionButtons.add(btF14);
        allFunctionButtons.add(btF15);
        allFunctionButtons.add(btF16);
        allFunctionButtons.add(btF17);
        allFunctionButtons.add(btF18);
        allFunctionButtons.add(btF19);
        allFunctionButtons.add(btF20);
        return allFunctionButtons;
    }

    public int getSelAmount() {
        return selAmount;
    }

    public void setSelAmount(int selAmount) {
        this.selAmount = selAmount;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btA1;
    private javax.swing.JButton btA10;
    private javax.swing.JButton btA2;
    private javax.swing.JButton btA3;
    private javax.swing.JButton btA4;
    private javax.swing.JButton btA5;
    private javax.swing.JButton btA6;
    private javax.swing.JButton btA7;
    private javax.swing.JButton btA8;
    private javax.swing.JButton btA9;
    private javax.swing.JButton btAmount;
    private javax.swing.JButton btAmountRemove;
    private javax.swing.JButton btBonstorno;
    private javax.swing.JButton btF1;
    private javax.swing.JButton btF10;
    private javax.swing.JButton btF11;
    private javax.swing.JButton btF12;
    private javax.swing.JButton btF13;
    private javax.swing.JButton btF14;
    private javax.swing.JButton btF15;
    private javax.swing.JButton btF16;
    private javax.swing.JButton btF17;
    private javax.swing.JButton btF18;
    private javax.swing.JButton btF19;
    private javax.swing.JButton btF2;
    private javax.swing.JButton btF20;
    private javax.swing.JButton btF3;
    private javax.swing.JButton btF4;
    private javax.swing.JButton btF5;
    private javax.swing.JButton btF6;
    private javax.swing.JButton btF7;
    private javax.swing.JButton btF8;
    private javax.swing.JButton btF9;
    private javax.swing.JButton btRemoveLine;
    private javax.swing.JButton btSSDO;
    private javax.swing.JButton btSum;
    private javax.swing.JButton btWRUE;
    private javax.swing.JButton btWRUE1;
    private javax.swing.JButton btWRUE2;
    private javax.swing.JButton btWRUE3;
    // End of variables declaration//GEN-END:variables
}
