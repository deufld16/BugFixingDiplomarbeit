/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package recorder.gui;

import recorder.guiOperations.GUIOperations;
import recorder.io.IOLoader;
import recorder.io.IOSaver;
import java.awt.Font;
import java.awt.Frame;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.border.EmptyBorder;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Maxi
 */
public class InitDlg_old extends javax.swing.JDialog {

    private boolean ok = false;
    private String markerName;
    private List<File> simulationFiles = new LinkedList<>();
    private String squashText;
    private File speicherort;
    private List<String> eanList = new LinkedList<>();
    private Frame parent;
    private JFileChooser fchSimulation;
    private List<String> fileExtensions;
    private List<String> extensionDescriptions;
//    private int layoutRows = 3;
//    private int layoutCols = 2;
//    private int simFileCnt = 1;

    /**
     * Creates new form InitDlg
     * @param parent
     * @param modal
     */
    public InitDlg_old(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        fchSimulation = new JFileChooser();
        try {
            fileExtensions = IOLoader.getExtensions();
            extensionDescriptions = IOLoader.getExtensionsDescription();
            FileNameExtensionFilter filter = null;
            for (int i = 0; i < fileExtensions.size(); i++) {
                filter = new FileNameExtensionFilter(extensionDescriptions.get(i).trim(), fileExtensions.get(i).trim());
                fchSimulation.setFileFilter(filter);
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Die Konfigurationsdatei hat einen Fehler - bitte geben Sie die Grenzen manuell ein", "Fehler", JOptionPane.ERROR_MESSAGE);
        }
        initComponents();
        this.setLocationRelativeTo(null);
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (Exception ex) {
//            Logger.getLogger(InitDlg.class.getName()).log(Level.SEVERE, null, ex);
        }
//Wenn man standardOrt haben will verwenden
//        File standard = new File(System.getProperty("user.dir") + File.separator + "src" + File.separator + "res"
//                + File.separator + "articles.conf");
//        if (standard.exists()) {
//            //btArticleConfig.setText(standard.toString());
//            //GUIOperations.setArticleConfigFile(standard);
//        }

        File dynFuncStandard = new File(System.getProperty("user.dir") + File.separator + "src" + File.separator + "res"
                + File.separator + "functions.conf");
        if (dynFuncStandard.exists()) {
            btFunctionConfig.setText(dynFuncStandard.toString());
            GUIOperations.setFuntionConfigFile(dynFuncStandard);
        }
        File artFuncStandard = new File(System.getProperty("user.dir") + File.separator + "src" + File.separator + "res"
                + File.separator + "articles.conf");
        if (artFuncStandard.exists()) {
            btArticleConfig.setText(dynFuncStandard.toString());
            GUIOperations.setArticleConfigFile(artFuncStandard);
        }
        if (GUIOperations.getInputPath() != null) {
            btSpeicherort.setText(GUIOperations.getInputPath().getFileName().toString());
            speicherort = GUIOperations.getInputPath().toFile();
        }
        paMain.setBorder(new EmptyBorder(35, 0, 0, 0));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paMain = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lbMarker = new javax.swing.JLabel();
        lbSquash = new javax.swing.JLabel();
        lbSimulationFile = new javax.swing.JLabel();
        lbFilesPlaceholder = new javax.swing.JLabel();
        lbArticleConfig = new javax.swing.JLabel();
        lbFunctionConfig = new javax.swing.JLabel();
        lbSpeicherort = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        tfMarker = new javax.swing.JTextField();
        tfSquash = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        btSimulationFile = new javax.swing.JButton();
        btAddSimulationTyp = new javax.swing.JButton();
        spFiles = new javax.swing.JScrollPane();
        lbFiles = new javax.swing.JLabel();
        btArticleConfig = new javax.swing.JButton();
        btFunctionConfig = new javax.swing.JButton();
        btSpeicherort = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cbLogin = new javax.swing.JCheckBox();
        cbLogout = new javax.swing.JCheckBox();
        paBtns = new javax.swing.JPanel();
        btOk = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(800, 600));

        paMain.setBackground(new java.awt.Color(255, 255, 255));
        paMain.setLayout(new java.awt.BorderLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(250, 217));
        jPanel1.setPreferredSize(new java.awt.Dimension(250, 100));
        jPanel1.setLayout(new java.awt.GridLayout(8, 1, 1, 1));

        lbMarker.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbMarker.setText(" Markername");
        jPanel1.add(lbMarker);

        lbSquash.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbSquash.setText(" Squashtext");
        jPanel1.add(lbSquash);

        lbSimulationFile.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbSimulationFile.setText(" Simulationsdateien");
        jPanel1.add(lbSimulationFile);

        lbFilesPlaceholder.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jPanel1.add(lbFilesPlaceholder);

        lbArticleConfig.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbArticleConfig.setText(" Artikelkonfiguration");
        jPanel1.add(lbArticleConfig);

        lbFunctionConfig.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbFunctionConfig.setText(" Funktionskonfiguration");
        jPanel1.add(lbFunctionConfig);

        lbSpeicherort.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbSpeicherort.setText(" Speicherort");
        jPanel1.add(lbSpeicherort);

        paMain.add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setMinimumSize(new java.awt.Dimension(312, 217));
        jPanel2.setPreferredSize(new java.awt.Dimension(425, 100));
        jPanel2.setLayout(new java.awt.GridLayout(8, 1, 1, 1));

        tfMarker.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tfMarker.setText("marker");
        tfMarker.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.add(tfMarker);

        tfSquash.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tfSquash.setText("dokumentation");
        tfSquash.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.add(tfSquash);

        jPanel4.setLayout(new java.awt.BorderLayout());

        btSimulationFile.setBackground(new java.awt.Color(255, 255, 255));
        btSimulationFile.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btSimulationFile.setText("Dateien auswählen");
        btSimulationFile.setMaximumSize(new java.awt.Dimension(270, 31));
        btSimulationFile.setMinimumSize(new java.awt.Dimension(270, 31));
        btSimulationFile.setPreferredSize(new java.awt.Dimension(270, 31));
        btSimulationFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSelectSimulationFile(evt);
            }
        });
        jPanel4.add(btSimulationFile, java.awt.BorderLayout.CENTER);

        btAddSimulationTyp.setBackground(new java.awt.Color(255, 255, 255));
        btAddSimulationTyp.setFont(new java.awt.Font("Tahoma", 1, 17)); // NOI18N
        btAddSimulationTyp.setText("<html><body>Simulationstyp </br>hinzufügen</body></html>");
        btAddSimulationTyp.setMaximumSize(new java.awt.Dimension(150, 31));
        btAddSimulationTyp.setPreferredSize(new java.awt.Dimension(150, 31));
        btAddSimulationTyp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddSimulationTyp(evt);
            }
        });
        jPanel4.add(btAddSimulationTyp, java.awt.BorderLayout.EAST);

        jPanel2.add(jPanel4);

        spFiles.setBackground(new java.awt.Color(255, 255, 255));

        lbFiles.setBackground(new java.awt.Color(255, 255, 255));
        lbFiles.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        spFiles.setViewportView(lbFiles);

        jPanel2.add(spFiles);

        btArticleConfig.setBackground(new java.awt.Color(255, 255, 255));
        btArticleConfig.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btArticleConfig.setText("Datei auswählen");
        btArticleConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSelectArticleConfigFile(evt);
            }
        });
        jPanel2.add(btArticleConfig);

        btFunctionConfig.setBackground(new java.awt.Color(255, 255, 255));
        btFunctionConfig.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btFunctionConfig.setText("-");
        btFunctionConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSelectFunctionConfigFile(evt);
            }
        });
        jPanel2.add(btFunctionConfig);

        btSpeicherort.setBackground(new java.awt.Color(255, 255, 255));
        btSpeicherort.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btSpeicherort.setText("Ordner auswählen");
        btSpeicherort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSpeichern(evt);
            }
        });
        jPanel2.add(btSpeicherort);

        jPanel3.setLayout(new java.awt.GridLayout(1, 2));

        cbLogin.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cbLogin.setText("login");
        cbLogin.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel3.add(cbLogin);

        cbLogout.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cbLogout.setText("logout");
        cbLogout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel3.add(cbLogout);

        jPanel2.add(jPanel3);

        paMain.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(paMain, java.awt.BorderLayout.CENTER);

        paBtns.setBackground(new java.awt.Color(255, 255, 255));
        paBtns.setPreferredSize(new java.awt.Dimension(59, 75));
        paBtns.setLayout(new java.awt.BorderLayout());

        btOk.setBackground(new java.awt.Color(255, 255, 255));
        btOk.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btOk.setText("Ok");
        btOk.setPreferredSize(new java.awt.Dimension(59, 61));
        btOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onOk(evt);
            }
        });
        paBtns.add(btOk, java.awt.BorderLayout.CENTER);

        getContentPane().add(paBtns, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Methode, welche überprüft, ob alle Notwendingen Felder im InitDialog
     * ausgefüllt worden sind Setzten der eingebenen Parameter und Disposen des
     * InitDialoges -> Main Programm geht los
     *
     * @param evt
     */
    private void onOk(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onOk
        // TODO add your handling code here:
        markerName = tfMarker.getText();
        squashText = tfSquash.getText();
        if (markerName == null || markerName.equals("")) {
            JOptionPane.showMessageDialog(null, "Bitte einen Markernamen eingeben!");
            return;
        }
//        if (squashText == null || squashText.equals("")) {
//            JOptionPane.showMessageDialog(null, "Bitte einen Squashtext eingeben!");
//            return;
//        }
        if (speicherort == null) {
            int reply = JOptionPane.showConfirmDialog(null, "Wenn kein Speicherort angegeben wird, \ndann wird Ihr Recorder "
                    + "im Ordner Dokumente\nals \"rec.xml\" abgespeichert", "Sind Sie sicher?", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.NO_OPTION) {
                return;
            }
        } else {
            GUIOperations.setInputPath(speicherort.toPath());
        }
        GUIOperations.setLogin(cbLogin.isSelected());
        GUIOperations.setLogout(cbLogout.isSelected());
        ok = true;
        dispose();
    }//GEN-LAST:event_onOk

    /**
     * JFileChooser, um das Simulationsfile auszuwählen
     * @param evt
     */
    private void onSelectSimulationFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSelectSimulationFile
        // TODO add your handling code here:
        JButton btCurrentSimFile = (JButton) evt.getSource();
        fchSimulation.setMultiSelectionEnabled(true);
        fchSimulation.setAcceptAllFileFilterUsed(false);
        int retValue = fchSimulation.showDialog(null, "Simulationsdatei auswählen");
        if (retValue == JFileChooser.APPROVE_OPTION) {
            lbFilesPlaceholder.setText("Ausgewählte Simulationsdateien");
            String filesInfo = "<html><body>";
            btCurrentSimFile.setText(fchSimulation.getSelectedFiles().length + " Simulationsfiles ausgewählt");
            simulationFiles = new LinkedList<>();
            for (File selectedFile : fchSimulation.getSelectedFiles()) {
                simulationFiles.add(selectedFile.getAbsoluteFile());
                filesInfo += selectedFile.getName() + "<br/>";
            }
            filesInfo += "</body></html>";
            lbFiles.setText(filesInfo);
        }
    }//GEN-LAST:event_onSelectSimulationFile

    /**
     * Methode, welche die Artikelconfigurationsfile auswählt, wenn man seine
     * Buttons mit Custom Artikeln belegen möchte (oberen 10)
     * @param evt
     */
    private void onSelectArticleConfigFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSelectArticleConfigFile
        JButton btAConfFile = (JButton) evt.getSource();
        JFileChooser fch = new JFileChooser();
        int retValue = fch.showDialog(null, "Artikelkonfigurationsdatei auswählen");
        if (retValue == JFileChooser.APPROVE_OPTION) {
            File articleConfig = fch.getSelectedFile();
            btAConfFile.setText(articleConfig.getName());
            GUIOperations.setArticleConfigFile(articleConfig);
        }
    }//GEN-LAST:event_onSelectArticleConfigFile

    /**
     * Methode, welche die Funktionskonfigurationsdatei auswählt, womit man
     * dynamische Funktionen auf den Funktionsbuttons hinterlegen kann
     * @param evt
     */
    private void onSelectFunctionConfigFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSelectFunctionConfigFile
        // TODO add your handling code here:
        JButton btFConfFile = (JButton) evt.getSource();
        JFileChooser fch = new JFileChooser();
        int retValue = fch.showDialog(null, "Funktionskonfigurationsdatei auswählen");
        if (retValue == JFileChooser.APPROVE_OPTION) {
            File functionConfig = fch.getSelectedFile();
            btFConfFile.setText(functionConfig.getName());
            GUIOperations.setFuntionConfigFile(functionConfig);
        }
    }//GEN-LAST:event_onSelectFunctionConfigFile
    /**
     * Methode, welche den Speicherort für die zu Schreibende Config-File setzt
     * und zwischenspeichert, sollte die Funktion "nächster Bon" verwendet
     * werden
     * @param evt
     */
    private void onSpeichern(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSpeichern
        JButton btSpeichern = (JButton) evt.getSource();
        JFileChooser fc = new JFileChooser("C:\\Develop");
        fc.setDialogTitle("Zielordner auswählen");
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int option = fc.showOpenDialog(null);
        if (option == JFileChooser.APPROVE_OPTION) {
            speicherort = fc.getSelectedFile();
            btSpeichern.setText(speicherort.getName());
        }
    }//GEN-LAST:event_onSpeichern

    /**
     * Methode, die einen Simulationstyp als FileExtensionFilter im JFileChooser hinzufügt
     * @param evt 
     */
    private void onAddSimulationTyp(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddSimulationTyp
        JTextField tfDescription = new JTextField();
        JTextField tfExtension = new JTextField();
        JLabel lbDescription = new JLabel("Geben Sie eine Beschreibung zum Simulationstyp ein\n(Beispiel: Ebon (.ebon)):");
        JLabel lbExtension = new JLabel("Geben Sie den Dateityp ein (Beispiel: ebon):");
        lbDescription.setFont(new Font("Tahoma", Font.BOLD, 18));
        lbExtension.setFont(new Font("Tahoma", Font.BOLD, 18));
        tfDescription.setFont(new Font("Tahoma", Font.BOLD, 18));
        tfExtension.setFont(new Font("Tahoma", Font.BOLD, 18));
        Object[] message = {
            lbDescription, tfDescription,
            lbExtension, tfExtension
        };
        int option = JOptionPane.showConfirmDialog(null, message, "Simulationstyp hinzufügen", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            try {
                fileExtensions.add(tfExtension.getText());
                extensionDescriptions.add(tfDescription.getText());
                addNewExtensionFilter(tfExtension.getText(), tfDescription.getText());
                IOSaver.saveExtensions(extensionDescriptions, fileExtensions);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Fehler beim Speichern von den Simulationstypen", "Fehler", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_onAddSimulationTyp

    public boolean isOk() {
        return ok;
    }

    /**
     * Methode, die alle Eingabedaten des Dialogs speichert
     * @return
     * @throws NullPointerException 
     */
    public Map<String, Object> getInitParams() throws NullPointerException {
        if (speicherort == null) {
            speicherort = new File(System.getProperty("user.home") + File.separator + "Documents" + File.separator + "rec.xml");
        }
        Map<String, Object> initParams = Stream.of(new Object[][]{
            {lbMarker.getText().trim(), markerName},
            {lbSimulationFile.getText().trim(), simulationFiles},
            {lbSquash.getText().trim(), squashText},
            {lbSpeicherort.getText().trim(), speicherort}
        }).collect(Collectors.toMap(data -> (String) data[0], data -> data[1]));
        return initParams;
    }

    /**
     * Methode, die ermöglicht, einen neuen ExtensionFilter für den JFileChooser für die Simulationsfiles anlegt
     * @param extension
     * @param desciption 
     */
    private void addNewExtensionFilter(String extension, String desciption) {
        FileNameExtensionFilter filter = new FileNameExtensionFilter(desciption.trim(), extension.trim());
        fchSimulation.setFileFilter(filter);
    }

    public List<String> getEanList() {
        return eanList;
    }

    public void setEanList(List<String> eanList) {
        this.eanList = eanList;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InitDlg_old.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InitDlg_old.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InitDlg_old.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InitDlg_old.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                InitDlg_old dialog = new InitDlg_old(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddSimulationTyp;
    private javax.swing.JButton btArticleConfig;
    private javax.swing.JButton btFunctionConfig;
    private javax.swing.JButton btOk;
    private javax.swing.JButton btSimulationFile;
    private javax.swing.JButton btSpeicherort;
    private javax.swing.JCheckBox cbLogin;
    private javax.swing.JCheckBox cbLogout;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lbArticleConfig;
    private javax.swing.JLabel lbFiles;
    private javax.swing.JLabel lbFilesPlaceholder;
    private javax.swing.JLabel lbFunctionConfig;
    private javax.swing.JLabel lbMarker;
    private javax.swing.JLabel lbSimulationFile;
    private javax.swing.JLabel lbSpeicherort;
    private javax.swing.JLabel lbSquash;
    private javax.swing.JPanel paBtns;
    private javax.swing.JPanel paMain;
    private javax.swing.JScrollPane spFiles;
    private javax.swing.JTextField tfMarker;
    private javax.swing.JTextField tfSquash;
    // End of variables declaration//GEN-END:variables

}
