/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package remote.gui;

import analyzer.beans.WhitelistEntry;
import analyzer.enums.ResultFileType;
import general.beans.io_objects.CommandRun;
import general.beans.io_objects.ExplorerLayer;
import general.beans.io_objects.ProjectRun;
import general.beans.io_objects.TestCaseRun;
import general.beans.io_objects.TestGroupRun;
import general.bl.GlobalAccess;
import general.bl.GlobalParamter;
import general.io.Mapper;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.net.SocketTimeoutException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JEditorPane;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.UIManager;
import org.json.JSONArray;
import org.json.JSONObject;
import org.knowm.xchart.PieChart;
import org.knowm.xchart.PieChartBuilder;
import org.knowm.xchart.XChartPanel;
import org.knowm.xchart.style.Styler;
import remote.bl.RemoteExecutionManager;
import remote.communication.RemoteClient;
import remote.ftp.FTPUtil;
import settings.io.Loader;
import simulator.beans.Backoffice;
import simulator.beans.Kasse;
import simulator.beans.Testsystem;
import simulator.bl.ExecutionManager;
import remote.ftp.FTPUpload;

/**
 *
 * @author Lukas Krobath
 */
public class RemotePanel extends javax.swing.JPanel {

    private DefaultComboBoxModel<ProjectRun> dcbmP;
    private DefaultComboBoxModel<Testsystem> dcbmT;
    private static final Color[] SLICECOLOR = new Color[]{new Color(255, 0, 0), new Color(100, 100, 100), new Color(0, 255, 0), new Color(14, 36, 204)};
    private PieChart ges;

    /**
     * Creates new form RemotePanel
     */
    public RemotePanel() {
        initComponents();
        RemoteExecutionManager.getInstance().setPanel(this);
        dcbmP = new DefaultComboBoxModel<>();
        dcbmT = new DefaultComboBoxModel<>();
        cbTestsystem.setModel(dcbmT);
        cbTestvorgang.setModel(dcbmP);
        RemoteExecutionManager.getInstance().setHost((Testsystem) dcbmT.getSelectedItem());
        ges = new PieChartBuilder().theme(Styler.ChartTheme.XChart).title("Gesamtübersicht").build();
        ges.addSeries("Fehlgeschlagen", 1);
        ges.addSeries("Wird bearbeitet", 1);
        ges.addSeries("Erfolgreich", 1);
        ges.addSeries("Ausstehend", 1);
        ges.getStyler().setSeriesColors(ExecutionManager.getSLICECOLOR());
        paGesamt.add(new XChartPanel(ges));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        paGesamt = new javax.swing.JPanel();
        paEinzel = new javax.swing.JPanel();
        paS = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        pbStatus = new javax.swing.JProgressBar();
        paSouth = new javax.swing.JPanel();
        btTVStart = new javax.swing.JButton();
        cbTestvorgang = new javax.swing.JComboBox<>();
        btTVStop = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btConnect = new javax.swing.JButton();
        cbTestsystem = new javax.swing.JComboBox<>();
        scrollPane = new javax.swing.JScrollPane();
        epLog = new javax.swing.JEditorPane();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(1, 2));

        paGesamt.setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 0));
        paGesamt.setLayout(new java.awt.BorderLayout());
        jPanel1.add(paGesamt);

        paEinzel.setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 0, 15, 15));
        paEinzel.setLayout(new java.awt.GridLayout(2, 2));
        jPanel1.add(paEinzel);

        add(jPanel1, java.awt.BorderLayout.CENTER);

        paS.setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));
        paS.setPreferredSize(new java.awt.Dimension(600, 450));
        paS.setLayout(new java.awt.BorderLayout(25, 25));

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 20, 0, 20));
        jPanel3.setLayout(new java.awt.BorderLayout(10, 10));

        pbStatus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        pbStatus.setEnabled(false);
        pbStatus.setPreferredSize(new java.awt.Dimension(146, 35));
        jPanel3.add(pbStatus, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel3, java.awt.BorderLayout.SOUTH);

        paSouth.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 20, 10, 20));
        paSouth.setPreferredSize(new java.awt.Dimension(700, 185));
        paSouth.setLayout(new java.awt.GridLayout(3, 2, 25, 10));

        btTVStart.setBackground(new java.awt.Color(51, 153, 0));
        btTVStart.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btTVStart.setForeground(new java.awt.Color(255, 255, 255));
        btTVStart.setText("Upload starten");
        btTVStart.setEnabled(false);
        btTVStart.setPreferredSize(new java.awt.Dimension(215, 50));
        btTVStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onStart(evt);
            }
        });
        paSouth.add(btTVStart);

        cbTestvorgang.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cbTestvorgang.setEnabled(false);
        cbTestvorgang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSelectTestvorgang(evt);
            }
        });
        paSouth.add(cbTestvorgang);

        btTVStop.setBackground(new java.awt.Color(255, 0, 0));
        btTVStop.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btTVStop.setForeground(new java.awt.Color(255, 255, 255));
        btTVStop.setText("Testvorgang abbrechen");
        btTVStop.setEnabled(false);
        btTVStop.setPreferredSize(new java.awt.Dimension(247, 80));
        btTVStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onStop(evt);
            }
        });
        paSouth.add(btTVStop);
        paSouth.add(jLabel1);

        btConnect.setBackground(new java.awt.Color(0, 0, 255));
        btConnect.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btConnect.setForeground(new java.awt.Color(255, 255, 255));
        btConnect.setText("Verbinden");
        btConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onConnect(evt);
            }
        });
        paSouth.add(btConnect);

        cbTestsystem.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cbTestsystem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSelect(evt);
            }
        });
        paSouth.add(cbTestsystem);

        jPanel2.add(paSouth, java.awt.BorderLayout.CENTER);

        paS.add(jPanel2, java.awt.BorderLayout.WEST);

        scrollPane.setPreferredSize(new java.awt.Dimension(111, 250));

        epLog.setContentType("text/html"); // NOI18N
        epLog.setText("<html>\r\n  <body>\r\n    <h1>Log Nachrichten</h1>\n  </body>\r\n</html>\r\n");
        epLog.setFocusable(false);
        scrollPane.setViewportView(epLog);

        paS.add(scrollPane, java.awt.BorderLayout.CENTER);

        add(paS, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void onConnect(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onConnect
        if (btConnect.getText().equals("Verbinden")) {
            try {
                updateTest();
                RemoteClient.getInstance().connect();
                btConnect.setText("Trennen");
                cbTestsystem.setEnabled(false);
                JSONObject mes = new JSONObject();
                mes.put("type", "status");
                RemoteClient.getInstance().sendToServer(mes.toString());
                JSONObject j = new JSONObject();
                j.put("type", "runningtarget");
                RemoteClient.getInstance().sendToServer(j.toString());
                JSONObject fin = new JSONObject();
                fin.put("type", "finished");
                RemoteClient.getInstance().sendToServer(fin.toString());
            } catch (SocketTimeoutException s) {
                Object[] options = {"OK"};
                int t = JOptionPane.showOptionDialog(this,
                        "Das Testsytem ist nicht erreichbar!\nBitte überprüfen Sie das System und die Konfiguration", "Fehler",
                        JOptionPane.PLAIN_MESSAGE,
                        JOptionPane.ERROR_MESSAGE,
                        null,
                        options,
                        options[0]);
            } catch (IOException ex) {
                Logger.getLogger(RemotePanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(RemotePanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NullPointerException n) {
                Object[] options = {"OK"};
                int t = JOptionPane.showOptionDialog(this,
                        "Es ist kein Testsystem verfügbar!\nSie werden automatisch in die Einstellungen weitergeleitet", "Fehler",
                        JOptionPane.PLAIN_MESSAGE,
                        JOptionPane.ERROR_MESSAGE,
                        null,
                        options,
                        options[0]);
                GlobalAccess.getInstance().getTest_ide_main_frame().changeTool("settings");
            }
        } else {
            RemoteClient.getInstance().disconnect();
            btTVStart.setEnabled(false);
            btTVStop.setEnabled(false);
            cbTestsystem.setEnabled(true);
            cbTestvorgang.setEnabled(false);
            btConnect.setText("Verbinden");
            btTVStart.setText("Upload starten");
            pbStatus.setValue(0);
            pbStatus.setString("");
            ges.updatePieSeries("Fehlgeschlagen", 1);
            ges.updatePieSeries("Wird bearbeitet", 1);
            ges.updatePieSeries("Erfolgreich", 1);
            ges.updatePieSeries("Ausstehend", 1);
        }
    }//GEN-LAST:event_onConnect

    private void onStart(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onStart
        if (btTVStart.getText().equals("Upload starten")) {
            try {
                btTVStart.setText("Testvorgang starten");
                btTVStart.setEnabled(false);
                FTPUpload ftp = new FTPUpload(Paths.get(Loader.getSpecificParameter(false).get("globalPath")), Paths.get(Loader.getSpecificParameter(false).get("projectPath")));
                new Thread(ftp).start();
            } catch (IOException ex) {
                Logger.getLogger(RemotePanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {

            try {
                JSONObject ob = new JSONObject();
                ob.put("type", "target");
                ob.put("target", ((ProjectRun) cbTestvorgang.getSelectedItem()).getDescription());
                RemoteClient.getInstance().sendToServer(ob.toString());

                JSONObject m = new JSONObject();
                m.put("type", "backoffice");
                m.put("ip", ExecutionManager.getInstance().getActiveSystem().getBackoffice().getStrIpAdr());
                RemoteClient.getInstance().sendToServer(m.toString());

                btTVStart.setEnabled(false);

                JSONObject mes = new JSONObject();
                mes.put("type", "cashpoint");
                JSONObject holder = new JSONObject();
                for (Kasse kasse : ExecutionManager.getInstance().getActiveSystem().getKassen()) {
                    JSONObject kassa = new JSONObject();
                    kassa.put("id", kasse.getiRegId());
                    kassa.put("group", kasse.getiRegGrp());
                    kassa.put("kind", kasse.getType());
                    holder.put(kasse.getStrIpAdr(), kassa);
                }
                mes.put("cashpoints", holder);
                RemoteClient.getInstance().sendToServer(mes.toString());

                JSONObject whitelist = new JSONObject();
                whitelist.put("type", "whitelist");
                JSONObject whitelists = new JSONObject();
                for (WhitelistEntry white : GlobalParamter.getInstance().getWhitelistEntries()) {
                    whitelists.put(white.getRegex(), white.getApplicationTypes());
                }
                whitelist.put("whitelist", whitelists);
                RemoteClient.getInstance().sendToServer(whitelist.toString());

                JSONObject me = new JSONObject();
                me.put("type", "start");
                RemoteClient.getInstance().sendToServer(me.toString());
            } catch (IOException ex) {
                Logger.getLogger(RemotePanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(RemotePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_onStart

    private void onStop(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onStop
        JSONObject message = new JSONObject();
        message.put("type", "stop");
        try {
            RemoteClient.getInstance().sendToServer(message.toString());
        } catch (IOException ex) {
            Logger.getLogger(RemotePanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(RemotePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_onStop

    private void onSelect(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSelect
        RemoteExecutionManager.getInstance().cleanUpCharts();
        RemoteExecutionManager.getInstance().setHost((Testsystem) dcbmT.getSelectedItem());
        try {
            for (Kasse kasse : ((Testsystem) dcbmT.getSelectedItem()).getKassen()) {
                RemoteExecutionManager.getInstance().getChartCash().put(kasse.getStrIpAdr(), RemoteExecutionManager.getInstance().addPieChart(kasse));
            }
        } catch (NullPointerException n) {
        }
        updateUI();
    }//GEN-LAST:event_onSelect

    private void onSelectTestvorgang(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSelectTestvorgang
        btTVStart.setText("Upload starten");
        pbStatus.setValue(0);
        pbStatus.setString("");
    }//GEN-LAST:event_onSelectTestvorgang

    public void updateTestsysteme() {
        dcbmT.removeAllElements();
        for (Testsystem testsystem : GlobalParamter.getInstance().getTestsysteme()) {
            dcbmT.addElement(testsystem);
        }
        updateUI();
    }

    public void updateTest() {
        dcbmP.removeAllElements();
        for (ProjectRun project : GlobalParamter.getInstance().getWorkingProjects()) {
            dcbmP.addElement(project);
        }
        updateUI();
    }

    public PieChart getGes() {
        return ges;
    }

    public JPanel getPaEinzel() {
        return paEinzel;
    }

    public JComboBox<Testsystem> getCbTestsystem() {
        return cbTestsystem;
    }

    public JComboBox<ProjectRun> getCbTestvorgang() {
        return cbTestvorgang;
    }

    public JEditorPane getEpLog() {
        return epLog;
    }

    public JButton getBtTVStart() {
        return btTVStart;
    }

    public JButton getBtTVStop() {
        return btTVStop;
    }

    public JButton getBtConnect() {
        return btConnect;
    }

    public JProgressBar getPbStatus() {
        return pbStatus;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConnect;
    private javax.swing.JButton btTVStart;
    private javax.swing.JButton btTVStop;
    private javax.swing.JComboBox<Testsystem> cbTestsystem;
    private javax.swing.JComboBox<ProjectRun> cbTestvorgang;
    private javax.swing.JEditorPane epLog;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel paEinzel;
    private javax.swing.JPanel paGesamt;
    private javax.swing.JPanel paS;
    private javax.swing.JPanel paSouth;
    private javax.swing.JProgressBar pbStatus;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
}
