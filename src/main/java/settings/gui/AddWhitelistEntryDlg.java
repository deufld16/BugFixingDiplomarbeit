/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package settings.gui;

import analyzer.beans.WhitelistEntry;
import analyzer.enums.ResultFileType;
import general.io.Loader;
import java.awt.Component;
import java.awt.Font;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JCheckBox;

/**
 * Dialog to gain relevant information which is needed for the creation 
 * of a new Whitelist-Entry
 * 
 * @author Maximilian Strohmaier
 */
public class AddWhitelistEntryDlg extends javax.swing.JDialog {

    private boolean ok = false;
    private WhitelistEntry entry;
    
    /**
     * Creates new form AddWhitelistEntryDlg
     * @param parent
     * @param modal
     * @param selectedEntry
     */
    public AddWhitelistEntryDlg(java.awt.Frame parent, boolean modal, WhitelistEntry selectedEntry) {
        super(parent, modal);
        initComponents();
        setSize(600, 360);
        setLocationRelativeTo(null);
        setTitle(lbHeaderTitle.getText());
        
        try {
            lbHeaderIcon.setIcon(Loader.loadLeafIcon("whitelist.png", 40, 40));
        } catch (IOException ex) {
            System.out.println(ex.toString());
        }
        
        for (ResultFileType value : ResultFileType.values()) {
            JCheckBox checkBox = new JCheckBox(value.name());
            checkBox.setFont(new Font("Tahoma", Font.PLAIN, 18));
            paTypes.add(checkBox);
        }
        
        if(selectedEntry != null) {
            tfDescription.setText(selectedEntry.getDescription());
            tfRegex.setText(selectedEntry.getRegex());
            for (ResultFileType applicationType : selectedEntry.getApplicationTypes()) {
                for (Component component : paTypes.getComponents()) {
                    if (component instanceof JCheckBox) {
                        JCheckBox cb = (JCheckBox) component;
                        if (cb.getText().equals(applicationType.name())) {
                            cb.setSelected(true);
                        }
                    }
                }
            }
        }
    }

    public boolean isOk() {
        return ok;
    }

    public WhitelistEntry getEntry() {
        return entry;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paHeader = new javax.swing.JPanel();
        lbHeaderIcon = new javax.swing.JLabel();
        lbHeaderTitle = new javax.swing.JLabel();
        paInfo = new javax.swing.JPanel();
        lbDescription = new javax.swing.JLabel();
        lbRegex = new javax.swing.JLabel();
        lbType = new javax.swing.JLabel();
        paValues = new javax.swing.JPanel();
        tfDescription = new javax.swing.JTextField();
        tfRegex = new javax.swing.JTextField();
        paTypes = new javax.swing.JPanel();
        paControl = new javax.swing.JPanel();
        btOk = new javax.swing.JButton();
        btCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.BorderLayout(5, 5));

        paHeader.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 1, 8));
        paHeader.setLayout(new java.awt.BorderLayout(10, 0));
        paHeader.add(lbHeaderIcon, java.awt.BorderLayout.WEST);

        lbHeaderTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbHeaderTitle.setText("Whitelist-Eintrag hinzufügen");
        paHeader.add(lbHeaderTitle, java.awt.BorderLayout.CENTER);

        getContentPane().add(paHeader, java.awt.BorderLayout.NORTH);

        paInfo.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 8, 1, 1));
        paInfo.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        lbDescription.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbDescription.setText("Bezeichnung:");
        paInfo.add(lbDescription);

        lbRegex.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbRegex.setText("Regulärer Ausdruck:");
        paInfo.add(lbRegex);

        lbType.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbType.setText("Anwenden bei:");
        paInfo.add(lbType);

        getContentPane().add(paInfo, java.awt.BorderLayout.LINE_START);

        paValues.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 8));
        paValues.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        tfDescription.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        paValues.add(tfDescription);

        tfRegex.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        paValues.add(tfRegex);

        paTypes.setLayout(new java.awt.GridLayout(2, 2));
        paValues.add(paTypes);

        getContentPane().add(paValues, java.awt.BorderLayout.CENTER);

        paControl.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 8, 8, 8));
        paControl.setLayout(new java.awt.GridLayout(1, 2, 5, 0));

        btOk.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btOk.setText("OK");
        btOk.setPreferredSize(new java.awt.Dimension(131, 50));
        btOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onOk(evt);
            }
        });
        paControl.add(btOk);

        btCancel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btCancel.setText("Abbrechen");
        btCancel.setPreferredSize(new java.awt.Dimension(131, 50));
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCancel(evt);
            }
        });
        paControl.add(btCancel);

        getContentPane().add(paControl, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method that is called when the user clicks ok
     * 
     * @param evt 
     */
    private void onOk(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onOk
        // TODO add your handling code here:
        String description = tfDescription.getText();
        String regex = tfRegex.getText();
        
        List<ResultFileType> types = new LinkedList<>();
        for (Component component : paTypes.getComponents()) {
            if (component instanceof JCheckBox) {
                JCheckBox cb = (JCheckBox) component;
                if(cb.isSelected()) {
                    types.add(ResultFileType.valueOf(cb.getText()));
                }
            }
        }
        
        entry = new WhitelistEntry(description, regex, types);
        
        ok = true;
        dispose();
    }//GEN-LAST:event_onOk

    /**
     * Method that is called when the user clicks cancel
     * 
     * @param evt 
     */
    private void onCancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCancel
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_onCancel


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btOk;
    private javax.swing.JLabel lbDescription;
    private javax.swing.JLabel lbHeaderIcon;
    private javax.swing.JLabel lbHeaderTitle;
    private javax.swing.JLabel lbRegex;
    private javax.swing.JLabel lbType;
    private javax.swing.JPanel paControl;
    private javax.swing.JPanel paHeader;
    private javax.swing.JPanel paInfo;
    private javax.swing.JPanel paTypes;
    private javax.swing.JPanel paValues;
    private javax.swing.JTextField tfDescription;
    private javax.swing.JTextField tfRegex;
    // End of variables declaration//GEN-END:variables
}
