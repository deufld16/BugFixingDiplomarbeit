/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package settings.gui;

import explorer.io.CommandsIO;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

/**
 *
 * @author Anna Lechner
 */
public class AddNewCommandDlg extends javax.swing.JDialog {

    private static final Font DEFAULT_BOLD_FONT = new Font("Tahoma", Font.BOLD, 18);
    private static final Font DEFAULT_PLAIN_FONT = new Font("Tahoma", Font.PLAIN, 18);
    private static final Font DEFAULT_ITALIC_FONT = new Font("Tahoma", Font.ITALIC, 18);

    private List<String> types;
    private boolean ok;
    private DefaultComboBoxModel dcbm;
    private Map<String, String> subnodes;
    private HintTextField tfCommandClassName;
    private HintTextField tfCommandDisplayName;
    private String className;
    private String displayName;

    /**
     * Creates new form ExplorerCommandsAddCommandDlg
     *
     * @param parent
     * @param modal
     */
    public AddNewCommandDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        subnodes = new LinkedHashMap<>();
        setTitle("Neuen Command hinzufügen");
        setSize(new Dimension(550, 350));
        setLocationRelativeTo(null);
        try {
            lbPicture.setIcon(general.io.Loader.loadLeafIcon("command.png", 40, 40));
            lbPicture.setHorizontalAlignment(SwingConstants.CENTER);
            lbEmpty.setIcon(general.io.Loader.loadLeafIcon("description.png", 40, 40));
            lbEmpty.setHorizontalAlignment(SwingConstants.CENTER);

            tfCommandClassName = new HintTextField("Neuen Command hinzufügen");
            tfCommandClassName.setFont(DEFAULT_ITALIC_FONT);
            paEast.add(tfCommandClassName);
            tfCommandDisplayName = new HintTextField("Beschreibung des Commands");
            tfCommandDisplayName.setFont(DEFAULT_ITALIC_FONT);
            paEast.add(tfCommandDisplayName);

            tfInputSubnode1_1.requestFocus();

            btAdd.setIcon(general.io.Loader.loadLeafIcon("plus.png", 40, 40));
            btRemove.setIcon(general.io.Loader.loadLeafIcon("minus.png", 40, 40));
            types = CommandsIO.readCommandTypes();
            dcbm = new DefaultComboBoxModel(types.toArray());
            cbTypes.setModel(dcbm);
            addNewSub();
            addNewSub();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public boolean isOk() {
        return ok;
    }

    public Map<String, String> getSubnodes() {
        return subnodes;
    }

    public String getClassName() {
        return className;
    }

    public String getDisplayName() {
        return displayName;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paHeadline = new javax.swing.JPanel();
        paWest = new javax.swing.JPanel();
        lbPicture = new javax.swing.JLabel();
        lbEmpty = new javax.swing.JLabel();
        paEast = new javax.swing.JPanel();
        paCenter = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfInputSubnode1_1 = new javax.swing.JTextField();
        tfInputDisplayname1_1 = new javax.swing.JTextField();
        cbTypes = new javax.swing.JComboBox<>();
        btAdd = new javax.swing.JButton();
        btRemove = new javax.swing.JButton();
        paButtons = new javax.swing.JPanel();
        btOk = new javax.swing.JButton();
        btAbbrechen = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        paHeadline.setLayout(new java.awt.BorderLayout());

        paWest.setLayout(new java.awt.GridLayout(2, 1));

        lbPicture.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbPicture.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));
        paWest.add(lbPicture);

        lbEmpty.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        paWest.add(lbEmpty);

        paHeadline.add(paWest, java.awt.BorderLayout.WEST);

        paEast.setLayout(new java.awt.GridLayout(2, 1));
        paHeadline.add(paEast, java.awt.BorderLayout.CENTER);

        getContentPane().add(paHeadline, java.awt.BorderLayout.NORTH);

        paCenter.setLayout(new java.awt.GridLayout(3, 3));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Nodename");
        paCenter.add(jLabel1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Displayname");
        paCenter.add(jLabel2);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Type");
        paCenter.add(jLabel3);

        tfInputSubnode1_1.setEditable(false);
        tfInputSubnode1_1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tfInputSubnode1_1.setText("command_text");
        paCenter.add(tfInputSubnode1_1);

        tfInputDisplayname1_1.setEditable(false);
        tfInputDisplayname1_1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tfInputDisplayname1_1.setText("Beschreibung");
        paCenter.add(tfInputDisplayname1_1);

        cbTypes.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cbTypes.setSelectedItem(cbTypes.getItemAt(0)
        );
        cbTypes.setEnabled(false);
        paCenter.add(cbTypes);

        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddNewSub(evt);
            }
        });
        paCenter.add(btAdd);

        btRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRemoveSub(evt);
            }
        });
        paCenter.add(btRemove);

        getContentPane().add(paCenter, java.awt.BorderLayout.CENTER);

        paButtons.setLayout(new java.awt.GridLayout(1, 2));

        btOk.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btOk.setText("OK");
        btOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onOk(evt);
            }
        });
        paButtons.add(btOk);

        btAbbrechen.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btAbbrechen.setText("Abbrechen");
        btAbbrechen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCancel(evt);
            }
        });
        paButtons.add(btAbbrechen);

        getContentPane().add(paButtons, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method when the user clicks on the button "Cancel"
     *
     * @param evt
     */
    private void onCancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCancel
        ok = false;
        dispose();
    }//GEN-LAST:event_onCancel

    /**
     * Method when the user clicks on the button "OK"
     *
     * @param evt
     */
    private void onOk(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onOk
        if (tfCommandClassName.getText().isEmpty() || tfCommandClassName.getText().equalsIgnoreCase("Neuen Command hinzufügen")) {
            JOptionPane.showMessageDialog(null, "Bitte geben Sie einen Namen für den Command ein!", "Fehler", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (tfCommandDisplayName.getText().isEmpty() || tfCommandDisplayName.getText().equalsIgnoreCase("Beschreibung des Commands")) {
            JOptionPane.showMessageDialog(null, "Bitte geben Sie eine Beschreibung für den Command ein!", "Fehler", JOptionPane.ERROR_MESSAGE);
            return;
        }
        for (int i = 3; i < paCenter.getComponents().length - 3; i += 3) {
            if (!(paCenter.getComponents()[i] instanceof JLabel)) {
                if (((JTextField) paCenter.getComponents()[i]).getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Bitte geben Sie einen Namen für jedes Attribut ein!", "Fehler", JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    if (((JTextField) paCenter.getComponents()[i + 1]).getText().isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Bitte geben Sie einen Displaynamen für jedes Attribut ein!", "Fehler", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    subnodes.put(((JTextField) paCenter.getComponents()[i]).getText(), ((JTextField) paCenter.getComponents()[i + 1]).getText()
                            + ";" + ((JComboBox) paCenter.getComponents()[i + 2]).getSelectedItem().toString());
                }
            }
        }
        className = tfCommandClassName.getText();
        displayName = tfCommandDisplayName.getText();
        ok = true;
        dispose();
    }//GEN-LAST:event_onOk

    /**
     * Method when the user clicks on the button "+"
     *
     * @param evt
     */
    private void onAddNewSub(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddNewSub
        addNewSub();
    }//GEN-LAST:event_onAddNewSub

    /**
     * Method when the user clicks on the button "-"
     *
     * @param evt
     */
    private void onRemoveSub(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRemoveSub
        GridLayout grid = (GridLayout) paCenter.getLayout();
        if (!(paCenter.getComponents()[paCenter.getComponents().length - 4] instanceof JLabel)
                && paCenter.getComponents()[paCenter.getComponents().length - 8] instanceof JTextField) {
            String key = ((JTextField) paCenter.getComponents()[paCenter.getComponents().length - 4]).getText();
            removeRow();
//        grid.setColumns(grid.getColumns() - 1);
            grid.setRows(grid.getRows() - 1);
            subnodes.remove(key);
        }

    }//GEN-LAST:event_onRemoveSub

    /**
     * Method to add a new row at the end of the JPanel
     */
    private void addNewSub() {
        GridLayout grid = (GridLayout) paCenter.getLayout();
//        grid.setColumns(grid.getColumns() + 1);
        grid.setRows(grid.getRows() + 1);
        addNewRow();
    }

    /**
     * Method to add a new row with one JTextField and one JComboBox
     */
    private void addNewRow() {
        paCenter.remove(btAdd);
        paCenter.remove(btRemove);
        setFontAndAdd(new JTextField());
        setFontAndAdd(new JTextField());
        setFontAndAdd(new JComboBox(new DefaultComboBoxModel(types.toArray())));
        paCenter.add(btAdd);
        paCenter.add(btRemove);
        paCenter.updateUI();
    }

    /**
     * Method to set the default plain font on a JComponent and add it to the
     * JPanel in the center (paCenter)
     *
     * @param comp
     */
    private void setFontAndAdd(JComponent comp) {
        comp.setFont(DEFAULT_PLAIN_FONT);
        paCenter.add(comp);
    }

    /**
     * Method to remove a row of the JPanel in the center (paCenter)
     */
    private void removeRow() {
        paCenter.remove(btAdd);
        paCenter.remove(btRemove);
        paCenter.remove(paCenter.getComponents()[paCenter.getComponents().length - 1]);
        paCenter.remove(paCenter.getComponents()[paCenter.getComponents().length - 1]);
        paCenter.remove(paCenter.getComponents()[paCenter.getComponents().length - 1]);
        paCenter.add(btAdd);
        paCenter.add(btRemove);
        paCenter.updateUI();
    }

    /**
     * Inner class for a JTextField that can display a hint when it is not in
     * the focus
     */
    class HintTextField extends JTextField implements FocusListener {

        private final String hint;
        private boolean showingHint;

        public HintTextField(final String hint) {
            super(hint);
            this.hint = hint;
            this.showingHint = true;
            super.addFocusListener(this);
        }

        @Override
        public void focusGained(FocusEvent e) {
            if (this.getText().isEmpty()) {
                super.setText("");
                showingHint = false;
            }
        }

        @Override
        public void focusLost(FocusEvent e) {
            if (this.getText().isEmpty()) {
                super.setText(hint);
                showingHint = true;
            }
        }

        @Override
        public String getText() {
            return showingHint ? "" : super.getText();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddNewCommandDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddNewCommandDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddNewCommandDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddNewCommandDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddNewCommandDlg dialog = new AddNewCommandDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAbbrechen;
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btOk;
    private javax.swing.JButton btRemove;
    private javax.swing.JComboBox<String> cbTypes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lbEmpty;
    private javax.swing.JLabel lbPicture;
    private javax.swing.JPanel paButtons;
    private javax.swing.JPanel paCenter;
    private javax.swing.JPanel paEast;
    private javax.swing.JPanel paHeadline;
    private javax.swing.JPanel paWest;
    private javax.swing.JTextField tfInputDisplayname1_1;
    private javax.swing.JTextField tfInputSubnode1_1;
    // End of variables declaration//GEN-END:variables
}
